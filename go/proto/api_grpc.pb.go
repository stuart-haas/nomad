// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: proto/api.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// InferenceServiceClient is the client API for InferenceService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type InferenceServiceClient interface {
	Infernece(ctx context.Context, in *InferenceRequest, opts ...grpc.CallOption) (InferenceService_InferneceClient, error)
}

type inferenceServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewInferenceServiceClient(cc grpc.ClientConnInterface) InferenceServiceClient {
	return &inferenceServiceClient{cc}
}

func (c *inferenceServiceClient) Infernece(ctx context.Context, in *InferenceRequest, opts ...grpc.CallOption) (InferenceService_InferneceClient, error) {
	stream, err := c.cc.NewStream(ctx, &InferenceService_ServiceDesc.Streams[0], "/api.InferenceService/Infernece", opts...)
	if err != nil {
		return nil, err
	}
	x := &inferenceServiceInferneceClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type InferenceService_InferneceClient interface {
	Recv() (*InferenceResponse, error)
	grpc.ClientStream
}

type inferenceServiceInferneceClient struct {
	grpc.ClientStream
}

func (x *inferenceServiceInferneceClient) Recv() (*InferenceResponse, error) {
	m := new(InferenceResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// InferenceServiceServer is the server API for InferenceService service.
// All implementations must embed UnimplementedInferenceServiceServer
// for forward compatibility
type InferenceServiceServer interface {
	Infernece(*InferenceRequest, InferenceService_InferneceServer) error
	mustEmbedUnimplementedInferenceServiceServer()
}

// UnimplementedInferenceServiceServer must be embedded to have forward compatible implementations.
type UnimplementedInferenceServiceServer struct {
}

func (UnimplementedInferenceServiceServer) Infernece(*InferenceRequest, InferenceService_InferneceServer) error {
	return status.Errorf(codes.Unimplemented, "method Infernece not implemented")
}
func (UnimplementedInferenceServiceServer) mustEmbedUnimplementedInferenceServiceServer() {}

// UnsafeInferenceServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to InferenceServiceServer will
// result in compilation errors.
type UnsafeInferenceServiceServer interface {
	mustEmbedUnimplementedInferenceServiceServer()
}

func RegisterInferenceServiceServer(s grpc.ServiceRegistrar, srv InferenceServiceServer) {
	s.RegisterService(&InferenceService_ServiceDesc, srv)
}

func _InferenceService_Infernece_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(InferenceRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(InferenceServiceServer).Infernece(m, &inferenceServiceInferneceServer{stream})
}

type InferenceService_InferneceServer interface {
	Send(*InferenceResponse) error
	grpc.ServerStream
}

type inferenceServiceInferneceServer struct {
	grpc.ServerStream
}

func (x *inferenceServiceInferneceServer) Send(m *InferenceResponse) error {
	return x.ServerStream.SendMsg(m)
}

// InferenceService_ServiceDesc is the grpc.ServiceDesc for InferenceService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var InferenceService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.InferenceService",
	HandlerType: (*InferenceServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Infernece",
			Handler:       _InferenceService_Infernece_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/api.proto",
}
