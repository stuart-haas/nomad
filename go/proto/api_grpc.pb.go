// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: proto/api.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// InferenceServiceClient is the client API for InferenceService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type InferenceServiceClient interface {
	Inference(ctx context.Context, in *InferenceRequest, opts ...grpc.CallOption) (*InferenceResponse, error)
	InferenceStream(ctx context.Context, in *InferenceRequest, opts ...grpc.CallOption) (InferenceService_InferenceStreamClient, error)
}

type inferenceServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewInferenceServiceClient(cc grpc.ClientConnInterface) InferenceServiceClient {
	return &inferenceServiceClient{cc}
}

func (c *inferenceServiceClient) Inference(ctx context.Context, in *InferenceRequest, opts ...grpc.CallOption) (*InferenceResponse, error) {
	out := new(InferenceResponse)
	err := c.cc.Invoke(ctx, "/api.InferenceService/Inference", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inferenceServiceClient) InferenceStream(ctx context.Context, in *InferenceRequest, opts ...grpc.CallOption) (InferenceService_InferenceStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &InferenceService_ServiceDesc.Streams[0], "/api.InferenceService/InferenceStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &inferenceServiceInferenceStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type InferenceService_InferenceStreamClient interface {
	Recv() (*InferenceResponse, error)
	grpc.ClientStream
}

type inferenceServiceInferenceStreamClient struct {
	grpc.ClientStream
}

func (x *inferenceServiceInferenceStreamClient) Recv() (*InferenceResponse, error) {
	m := new(InferenceResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// InferenceServiceServer is the server API for InferenceService service.
// All implementations must embed UnimplementedInferenceServiceServer
// for forward compatibility
type InferenceServiceServer interface {
	Inference(context.Context, *InferenceRequest) (*InferenceResponse, error)
	InferenceStream(*InferenceRequest, InferenceService_InferenceStreamServer) error
	mustEmbedUnimplementedInferenceServiceServer()
}

// UnimplementedInferenceServiceServer must be embedded to have forward compatible implementations.
type UnimplementedInferenceServiceServer struct {
}

func (UnimplementedInferenceServiceServer) Inference(context.Context, *InferenceRequest) (*InferenceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Inference not implemented")
}
func (UnimplementedInferenceServiceServer) InferenceStream(*InferenceRequest, InferenceService_InferenceStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method InferenceStream not implemented")
}
func (UnimplementedInferenceServiceServer) mustEmbedUnimplementedInferenceServiceServer() {}

// UnsafeInferenceServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to InferenceServiceServer will
// result in compilation errors.
type UnsafeInferenceServiceServer interface {
	mustEmbedUnimplementedInferenceServiceServer()
}

func RegisterInferenceServiceServer(s grpc.ServiceRegistrar, srv InferenceServiceServer) {
	s.RegisterService(&InferenceService_ServiceDesc, srv)
}

func _InferenceService_Inference_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InferenceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InferenceServiceServer).Inference(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.InferenceService/Inference",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InferenceServiceServer).Inference(ctx, req.(*InferenceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InferenceService_InferenceStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(InferenceRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(InferenceServiceServer).InferenceStream(m, &inferenceServiceInferenceStreamServer{stream})
}

type InferenceService_InferenceStreamServer interface {
	Send(*InferenceResponse) error
	grpc.ServerStream
}

type inferenceServiceInferenceStreamServer struct {
	grpc.ServerStream
}

func (x *inferenceServiceInferenceStreamServer) Send(m *InferenceResponse) error {
	return x.ServerStream.SendMsg(m)
}

// InferenceService_ServiceDesc is the grpc.ServiceDesc for InferenceService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var InferenceService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.InferenceService",
	HandlerType: (*InferenceServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Inference",
			Handler:    _InferenceService_Inference_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "InferenceStream",
			Handler:       _InferenceService_InferenceStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/api.proto",
}
